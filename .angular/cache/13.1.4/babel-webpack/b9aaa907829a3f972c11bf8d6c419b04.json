{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\pacadi\\\\Downloads\\\\CollectedProject\\\\Front\\\\CollectedFront_Beta\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/modules/login/auth.service\";\nexport class AuthJwtInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  } // intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n  // \tconst authToken = this.authService.getToken();\n  // \tthis.authService.getToken().subscribe(\n  // \t\t{ \n  // \t\t\tnext: console.log('Token:', response.token),\n  // \t\t\terror :console.error('Error:', error)\n  // \t\t}\n  // \t );\n  // \tconst authReq = request.clone({\n  // \t\tsetHeaders: {\n  // \t\t\tAuthorization: `Bearer ${authToken}`\n  // \t\t}\n  // \t});\n  // \treturn next.handle(authReq);\n  // }\n\n\n  intercept(req, next) {\n    return from(this.acquireToken(req, next));\n  }\n\n  acquireToken(req, next) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = yield _this.authService.acquireToken();\n      const headers = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return next.handle(headers).toPromise();\n    })();\n  }\n\n}\n\nAuthJwtInterceptor.ɵfac = function AuthJwtInterceptor_Factory(t) {\n  return new (t || AuthJwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\n\nAuthJwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthJwtInterceptor,\n  factory: AuthJwtInterceptor.ɵfac\n});","map":{"version":3,"sources":["C:/Users/pacadi/Downloads/CollectedProject/Front/CollectedFront_Beta/src/app/modules/login/interceptor/auth-jwt.interceptor.ts"],"names":["from","i0","i1","AuthJwtInterceptor","constructor","authService","intercept","req","next","acquireToken","token","headers","clone","set","handle","toPromise","ɵfac","AuthJwtInterceptor_Factory","t","ɵɵinject","AuthService","ɵprov","ɵɵdefineInjectable","factory"],"mappings":";AAAA,SAASA,IAAT,QAAqB,MAArB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kDAApB;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,SAAKA,WAAL,GAAmBA,WAAnB;AACH,GAH2B,CAI5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,SAAS,CAACC,GAAD,EAAMC,IAAN,EAAY;AACjB,WAAOR,IAAI,CAAC,KAAKS,YAAL,CAAkBF,GAAlB,EAAuBC,IAAvB,CAAD,CAAX;AACH;;AACKC,EAAAA,YAAY,CAACF,GAAD,EAAMC,IAAN,EAAY;AAAA;;AAAA;AAC1B,YAAME,KAAK,SAAS,KAAI,CAACL,WAAL,CAAiBI,YAAjB,EAApB;AACA,YAAME,OAAO,GAAGJ,GAAG,CAACK,KAAJ,CAAU;AACtBD,QAAAA,OAAO,EAAEJ,GAAG,CAACI,OAAJ,CAAYE,GAAZ,CAAgB,eAAhB,EAAkC,UAASH,KAAM,EAAjD;AADa,OAAV,CAAhB;AAGA,aAAOF,IAAI,CAACM,MAAL,CAAYH,OAAZ,EAAqBI,SAArB,EAAP;AAL0B;AAM7B;;AA5B2B;;AA8BhCZ,kBAAkB,CAACa,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAIf,kBAAV,EAA8BF,EAAE,CAACkB,QAAH,CAAYjB,EAAE,CAACkB,WAAf,CAA9B,CAAP;AAAoE,CAAvI;;AACAjB,kBAAkB,CAACkB,KAAnB,GAA2B,aAAcpB,EAAE,CAACqB,kBAAH,CAAsB;AAAEZ,EAAAA,KAAK,EAAEP,kBAAT;AAA6BoB,EAAAA,OAAO,EAAEpB,kBAAkB,CAACa;AAAzD,CAAtB,CAAzC","sourcesContent":["import { from } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"src/app/core/services/modules/login/auth.service\";\r\nexport class AuthJwtInterceptor {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n    }\r\n    // intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    // \tconst authToken = this.authService.getToken();\r\n    // \tthis.authService.getToken().subscribe(\r\n    // \t\t{ \r\n    // \t\t\tnext: console.log('Token:', response.token),\r\n    // \t\t\terror :console.error('Error:', error)\r\n    // \t\t}\r\n    // \t );\r\n    // \tconst authReq = request.clone({\r\n    // \t\tsetHeaders: {\r\n    // \t\t\tAuthorization: `Bearer ${authToken}`\r\n    // \t\t}\r\n    // \t});\r\n    // \treturn next.handle(authReq);\r\n    // }\r\n    intercept(req, next) {\r\n        return from(this.acquireToken(req, next));\r\n    }\r\n    async acquireToken(req, next) {\r\n        const token = await this.authService.acquireToken();\r\n        const headers = req.clone({\r\n            headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n        });\r\n        return next.handle(headers).toPromise();\r\n    }\r\n}\r\nAuthJwtInterceptor.ɵfac = function AuthJwtInterceptor_Factory(t) { return new (t || AuthJwtInterceptor)(i0.ɵɵinject(i1.AuthService)); };\r\nAuthJwtInterceptor.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthJwtInterceptor, factory: AuthJwtInterceptor.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}